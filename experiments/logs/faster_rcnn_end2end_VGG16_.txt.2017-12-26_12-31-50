+ echo Logging output to experiments/logs/faster_rcnn_end2end_VGG16_.txt.2017-12-26_12-31-50
Logging output to experiments/logs/faster_rcnn_end2end_VGG16_.txt.2017-12-26_12-31-50
+ python ./tools/train_net.py --device gpu --device_id 0 --weights data/pretrain_model/VGG_imagenet.npy --imdb voc_2007_trainval --iters 100 --cfg experiments/cfgs/faster_rcnn_end2end.yml --network VGGnet_train
voc_2007_train
voc_2007_val
voc_2007_trainval
voc_2007_test
kitti_train
kitti_val
kitti_trainval
kitti_test
nthu_71
nthu_370
Called with args:
Namespace(cfg_file='experiments/cfgs/faster_rcnn_end2end.yml', device='gpu', device_id=0, imdb_name='voc_2007_trainval', max_iters=100, network_name='VGGnet_train', pretrained_model='data/pretrain_model/VGG_imagenet.npy', randomize=False, set_cfgs=None, solver=None)
Using config:
{'DATA_DIR': '/home/alex/Faster-RCNN_TF/data',
 'DEDUP_BOXES': 0.0625,
 'EPS': 1e-14,
 'EXP_DIR': 'faster_rcnn_end2end',
 'GPU_ID': 0,
 'IS_MULTISCALE': False,
 'MATLAB': 'matlab',
 'MODELS_DIR': '/home/alex/Faster-RCNN_TF/models/pascal_voc',
 'PIXEL_MEANS': array([[[ 102.9801,  115.9465,  122.7717]]]),
 'RNG_SEED': 3,
 'ROOT_DIR': '/home/alex/Faster-RCNN_TF',
 'TEST': {'BBOX_REG': True,
          'DEBUG_TIMELINE': False,
          'HAS_RPN': True,
          'MAX_SIZE': 1000,
          'NMS': 0.3,
          'PROPOSAL_METHOD': 'selective_search',
          'RPN_MIN_SIZE': 16,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 300,
          'RPN_PRE_NMS_TOP_N': 6000,
          'SCALES': [600],
          'SVM': False},
 'TRAIN': {'ASPECT_GROUPING': True,
           'BATCH_SIZE': 128,
           'BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'BBOX_NORMALIZE_MEANS': [0.0, 0.0, 0.0, 0.0],
           'BBOX_NORMALIZE_STDS': [0.1, 0.1, 0.2, 0.2],
           'BBOX_NORMALIZE_TARGETS': True,
           'BBOX_NORMALIZE_TARGETS_PRECOMPUTED': True,
           'BBOX_REG': True,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'DEBUG_TIMELINE': False,
           'DISPLAY': 10,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'GAMMA': 0.1,
           'HAS_RPN': True,
           'IMS_PER_BATCH': 1,
           'LEARNING_RATE': 0.001,
           'MAX_SIZE': 1000,
           'MOMENTUM': 0.9,
           'PROPOSAL_METHOD': 'gt',
           'RPN_BATCHSIZE': 256,
           'RPN_BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'RPN_CLOBBER_POSITIVES': False,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 16,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POSITIVE_WEIGHT': -1.0,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'SCALES': [600],
           'SNAPSHOT_INFIX': '',
           'SNAPSHOT_ITERS': 5000,
           'SNAPSHOT_PREFIX': 'VGGnet_fast_rcnn',
           'STEPSIZE': 50000,
           'USE_FLIPPED': True,
           'USE_PREFETCH': False},
 'USE_GPU_NMS': True}
<bound method pascal_voc.default_roidb of <datasets.pascal_voc.pascal_voc object at 0x7f8e66a96fd0>>
Loaded dataset `voc_2007_trainval` for training
Appending horizontally-flipped training examples...
voc_2007_trainval gt roidb loaded from /home/alex/Faster-RCNN_TF/data/cache/voc_2007_trainval_gt_roidb.pkl
done
Preparing training data...
done
Output will be saved to `/home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval`
/gpu:0
Tensor("Placeholder:0", shape=(?, ?, ?, 3), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_cls_score/rpn_cls_score:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("Placeholder_2:0", shape=(?, 5), dtype=float32)
Tensor("Placeholder_1:0", shape=(?, 3), dtype=float32)
Tensor("Placeholder:0", shape=(?, ?, ?, 3), dtype=float32)
Tensor("rpn_conv/3x3/rpn_conv/3x3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_cls_score/rpn_cls_score:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_cls_prob:0", shape=(?, ?, ?, ?), dtype=float32)
Tensor("rpn_cls_prob_reshape:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_bbox_pred/rpn_bbox_pred:0", shape=(?, ?, ?, 36), dtype=float32)
Tensor("Placeholder_1:0", shape=(?, 3), dtype=float32)
Tensor("rpn_rois:0", shape=(?, 5), dtype=float32)
Tensor("Placeholder_2:0", shape=(?, 5), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
(<tf.Tensor 'roi-data/rois:0' shape=(?, 5) dtype=float32>, <tf.Tensor 'roi-data/Cast:0' shape=<unknown> dtype=int32>, <tf.Tensor 'roi-data/PyFunc:2' shape=<unknown> dtype=float32>, <tf.Tensor 'roi-data/PyFunc:3' shape=<unknown> dtype=float32>, <tf.Tensor 'roi-data/PyFunc:4' shape=<unknown> dtype=float32>)
[<tf.Tensor 'conv5_3/conv5_3:0' shape=(?, ?, ?, 512) dtype=float32>, <tf.Tensor 'roi-data/rois:0' shape=(?, 5) dtype=float32>]
Tensor("drop7/mul:0", shape=(?, 4096), dtype=float32)
Use network `VGGnet_train` in training
Filtered 0 roidb entries: 456 -> 456
2017-12-26 12:31:55.115961: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 12:31:55.116027: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 12:31:55.116045: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 12:31:55.476307: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:893] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2017-12-26 12:31:55.476914: I tensorflow/core/common_runtime/gpu/gpu_device.cc:955] Found device 0 with properties: 
name: GeForce GTX 1080
major: 6 minor: 1 memoryClockRate (GHz) 1.835
pciBusID 0000:83:00.0
Total memory: 7.92GiB
Free memory: 7.19GiB
2017-12-26 12:31:55.476956: I tensorflow/core/common_runtime/gpu/gpu_device.cc:976] DMA: 0 
2017-12-26 12:31:55.476980: I tensorflow/core/common_runtime/gpu/gpu_device.cc:986] 0:   Y 
2017-12-26 12:31:55.477005: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1045] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1080, pci bus id: 0000:83:00.0)
Computing bounding-box regression targets...
bbox target means:
[[ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]]
[ 0.  0.  0.  0.]
bbox target stdevs:
[[ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]]
[ 0.1  0.1  0.2  0.2]
Normalizing targets
done
Solving...
/home/alex/anaconda3/envs/py27/lib/python2.7/site-packages/tensorflow/python/ops/gradients_impl.py:95: UserWarning: Converting sparse IndexedSlices to a dense Tensor of unknown shape. This may consume a large amount of memory.
  "Converting sparse IndexedSlices to a dense Tensor of unknown shape. "
Loading pretrained model weights from data/pretrain_model/VGG_imagenet.npy
assign pretrain model weights to conv5_1
assign pretrain model biases to conv5_1
assign pretrain model weights to fc6
assign pretrain model biases to fc6
assign pretrain model weights to conv5_3
assign pretrain model biases to conv5_3
assign pretrain model weights to fc7
assign pretrain model biases to fc7
ignore fc8
ignore fc8
assign pretrain model weights to conv5_2
assign pretrain model biases to conv5_2
assign pretrain model weights to conv4_1
assign pretrain model biases to conv4_1
assign pretrain model weights to conv4_2
assign pretrain model biases to conv4_2
assign pretrain model weights to conv4_3
assign pretrain model biases to conv4_3
assign pretrain model weights to conv3_3
assign pretrain model biases to conv3_3
assign pretrain model weights to conv3_2
assign pretrain model biases to conv3_2
assign pretrain model weights to conv3_1
assign pretrain model biases to conv3_1
assign pretrain model weights to conv1_1
assign pretrain model biases to conv1_1
assign pretrain model weights to conv1_2
assign pretrain model biases to conv1_2
assign pretrain model weights to conv2_2
assign pretrain model biases to conv2_2
assign pretrain model weights to conv2_1
assign pretrain model biases to conv2_1
iter: 10 / 100, total loss: 1.1395, rpn_loss_cls: 0.5267, rpn_loss_box: 0.1412, loss_cls: 0.1534, loss_box: 0.3183, lr: 0.001000
speed: 0.486s / iter
iter: 20 / 100, total loss: 0.4695, rpn_loss_cls: 0.3948, rpn_loss_box: 0.0536, loss_cls: 0.0208, loss_box: 0.0003, lr: 0.001000
speed: 0.435s / iter
iter: 30 / 100, total loss: 0.7351, rpn_loss_cls: 0.3611, rpn_loss_box: 0.1904, loss_cls: 0.1258, loss_box: 0.0578, lr: 0.001000
speed: 0.394s / iter
iter: 40 / 100, total loss: 0.3907, rpn_loss_cls: 0.2623, rpn_loss_box: 0.0170, loss_cls: 0.0842, loss_box: 0.0272, lr: 0.001000
speed: 0.372s / iter
iter: 50 / 100, total loss: 1.7565, rpn_loss_cls: 0.2897, rpn_loss_box: 0.2544, loss_cls: 0.9274, loss_box: 0.2850, lr: 0.001000
speed: 0.352s / iter
iter: 60 / 100, total loss: 1.6070, rpn_loss_cls: 0.5697, rpn_loss_box: 0.5994, loss_cls: 0.3330, loss_box: 0.1050, lr: 0.001000
speed: 0.344s / iter
iter: 70 / 100, total loss: 1.7465, rpn_loss_cls: 0.2514, rpn_loss_box: 0.4284, loss_cls: 0.4403, loss_box: 0.6264, lr: 0.001000
speed: 0.338s / iter
iter: 80 / 100, total loss: 0.5183, rpn_loss_cls: 0.3270, rpn_loss_box: 0.0476, loss_cls: 0.1167, loss_box: 0.0269, lr: 0.001000
speed: 0.342s / iter
iter: 90 / 100, total loss: 0.3678, rpn_loss_cls: 0.0526, rpn_loss_box: 0.0021, loss_cls: 0.1435, loss_box: 0.1696, lr: 0.001000
speed: 0.338s / iter
iter: 100 / 100, total loss: 1.7926, rpn_loss_cls: 0.4028, rpn_loss_box: 0.2561, loss_cls: 0.6846, loss_box: 0.4491, lr: 0.001000
speed: 0.339s / iter
Wrote snapshot to: /home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval/VGGnet_fast_rcnn_iter_100.ckpt
done solving

real	1m18.042s
user	0m58.904s
sys	0m17.792s
+ set +x
+ python ./tools/test_net.py --device gpu --device_id 0 --weights /home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval/VGGnet_fast_rcnn_iter_100.ckpt --imdb voc_2007_test --cfg experiments/cfgs/faster_rcnn_end2end.yml --network VGGnet_test
voc_2007_train
voc_2007_val
voc_2007_trainval
voc_2007_test
kitti_train
kitti_val
kitti_trainval
kitti_test
nthu_71
nthu_370
Called with args:
Namespace(cfg_file='experiments/cfgs/faster_rcnn_end2end.yml', comp_mode=False, device='gpu', device_id=0, imdb_name='voc_2007_test', model='/home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval/VGGnet_fast_rcnn_iter_100.ckpt', network_name='VGGnet_test', prototxt=None, wait=True)
Using config:
{'DATA_DIR': '/home/alex/Faster-RCNN_TF/data',
 'DEDUP_BOXES': 0.0625,
 'EPS': 1e-14,
 'EXP_DIR': 'faster_rcnn_end2end',
 'GPU_ID': 0,
 'IS_MULTISCALE': False,
 'MATLAB': 'matlab',
 'MODELS_DIR': '/home/alex/Faster-RCNN_TF/models/pascal_voc',
 'PIXEL_MEANS': array([[[ 102.9801,  115.9465,  122.7717]]]),
 'RNG_SEED': 3,
 'ROOT_DIR': '/home/alex/Faster-RCNN_TF',
 'TEST': {'BBOX_REG': True,
          'DEBUG_TIMELINE': False,
          'HAS_RPN': True,
          'MAX_SIZE': 1000,
          'NMS': 0.3,
          'PROPOSAL_METHOD': 'selective_search',
          'RPN_MIN_SIZE': 16,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 300,
          'RPN_PRE_NMS_TOP_N': 6000,
          'SCALES': [600],
          'SVM': False},
 'TRAIN': {'ASPECT_GROUPING': True,
           'BATCH_SIZE': 128,
           'BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'BBOX_NORMALIZE_MEANS': [0.0, 0.0, 0.0, 0.0],
           'BBOX_NORMALIZE_STDS': [0.1, 0.1, 0.2, 0.2],
           'BBOX_NORMALIZE_TARGETS': True,
           'BBOX_NORMALIZE_TARGETS_PRECOMPUTED': True,
           'BBOX_REG': True,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'DEBUG_TIMELINE': False,
           'DISPLAY': 10,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'GAMMA': 0.1,
           'HAS_RPN': True,
           'IMS_PER_BATCH': 1,
           'LEARNING_RATE': 0.001,
           'MAX_SIZE': 1000,
           'MOMENTUM': 0.9,
           'PROPOSAL_METHOD': 'gt',
           'RPN_BATCHSIZE': 256,
           'RPN_BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'RPN_CLOBBER_POSITIVES': False,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 16,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POSITIVE_WEIGHT': -1.0,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'SCALES': [600],
           'SNAPSHOT_INFIX': '',
           'SNAPSHOT_ITERS': 5000,
           'SNAPSHOT_PREFIX': 'VGGnet_fast_rcnn',
           'STEPSIZE': 50000,
           'USE_FLIPPED': True,
           'USE_PREFETCH': False},
 'USE_GPU_NMS': True}
<bound method pascal_voc.default_roidb of <datasets.pascal_voc.pascal_voc object at 0x7fdeaf5ac5d0>>
/gpu:0
Tensor("Placeholder:0", shape=(?, ?, ?, 3), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_conv/3x3/rpn_conv/3x3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_cls_score/rpn_cls_score:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_cls_prob:0", shape=(?, ?, ?, ?), dtype=float32)
Tensor("rpn_cls_prob_reshape:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_bbox_pred/rpn_bbox_pred:0", shape=(?, ?, ?, 36), dtype=float32)
Tensor("Placeholder_1:0", shape=(?, 3), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rois:0", shape=(?, 5), dtype=float32)
[<tf.Tensor 'conv5_3/conv5_3:0' shape=(?, ?, ?, 512) dtype=float32>, <tf.Tensor 'rois:0' shape=(?, 5) dtype=float32>]
Tensor("fc7/fc7:0", shape=(?, 4096), dtype=float32)
Use network `VGGnet_test` in training
2017-12-26 12:33:11.042948: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 12:33:11.043040: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 12:33:11.043051: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 12:33:11.397657: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:893] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2017-12-26 12:33:11.398298: I tensorflow/core/common_runtime/gpu/gpu_device.cc:955] Found device 0 with properties: 
name: GeForce GTX 1080
major: 6 minor: 1 memoryClockRate (GHz) 1.835
pciBusID 0000:83:00.0
Total memory: 7.92GiB
Free memory: 7.19GiB
2017-12-26 12:33:11.398336: I tensorflow/core/common_runtime/gpu/gpu_device.cc:976] DMA: 0 
2017-12-26 12:33:11.398359: I tensorflow/core/common_runtime/gpu/gpu_device.cc:986] 0:   Y 
2017-12-26 12:33:11.398382: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1045] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1080, pci bus id: 0000:83:00.0)
Loading model weights from /home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval/VGGnet_fast_rcnn_iter_100.ckpt
im_detect: 1/255 2.592s 0.001s
im_detect: 2/255 1.649s 0.000s
im_detect: 3/255 1.140s 0.000s
im_detect: 4/255 1.017s 0.000s
im_detect: 5/255 0.838s 0.000s
im_detect: 6/255 0.719s 0.000s
im_detect: 7/255 0.633s 0.000s
im_detect: 8/255 0.566s 0.000s
im_detect: 9/255 0.515s 0.000s
im_detect: 10/255 0.475s 0.000s
im_detect: 11/255 0.442s 0.000s
im_detect: 12/255 0.415s 0.000s
im_detect: 13/255 0.391s 0.000s
im_detect: 14/255 0.371s 0.000s
im_detect: 15/255 0.353s 0.000s
im_detect: 16/255 0.338s 0.000s
im_detect: 17/255 0.325s 0.000s
im_detect: 18/255 0.313s 0.000s
im_detect: 19/255 0.302s 0.000s
im_detect: 20/255 0.292s 0.000s
im_detect: 21/255 0.284s 0.000s
im_detect: 22/255 0.275s 0.000s
im_detect: 23/255 0.268s 0.000s
im_detect: 24/255 0.261s 0.000s
im_detect: 25/255 0.255s 0.000s
im_detect: 26/255 0.268s 0.000s
im_detect: 27/255 0.283s 0.000s
im_detect: 28/255 0.277s 0.000s
im_detect: 29/255 0.271s 0.000s
im_detect: 30/255 0.266s 0.000s
im_detect: 31/255 0.261s 0.000s
im_detect: 32/255 0.256s 0.000s
im_detect: 33/255 0.265s 0.000s
im_detect: 34/255 0.261s 0.000s
im_detect: 35/255 0.269s 0.000s
im_detect: 36/255 0.264s 0.000s
im_detect: 37/255 0.261s 0.000s
im_detect: 38/255 0.270s 0.000s
im_detect: 39/255 0.266s 0.000s
im_detect: 40/255 0.275s 0.000s
im_detect: 41/255 0.271s 0.000s
im_detect: 42/255 0.267s 0.000s
im_detect: 43/255 0.264s 0.000s
im_detect: 44/255 0.272s 0.000s
im_detect: 45/255 0.269s 0.000s
im_detect: 46/255 0.266s 0.000s
im_detect: 47/255 0.264s 0.000s
im_detect: 48/255 0.261s 0.000s
im_detect: 49/255 0.258s 0.000s
im_detect: 50/255 0.256s 0.000s
im_detect: 51/255 0.254s 0.000s
im_detect: 52/255 0.252s 0.000s
im_detect: 53/255 0.259s 0.000s
im_detect: 54/255 0.257s 0.000s
im_detect: 55/255 0.263s 0.000s
im_detect: 56/255 0.261s 0.000s
im_detect: 57/255 0.265s 0.000s
im_detect: 58/255 0.262s 0.000s
im_detect: 59/255 0.270s 0.000s
im_detect: 60/255 0.267s 0.000s
im_detect: 61/255 0.264s 0.000s
im_detect: 62/255 0.263s 0.000s
im_detect: 63/255 0.271s 0.000s
im_detect: 64/255 0.275s 0.000s
im_detect: 65/255 0.282s 0.000s
im_detect: 66/255 0.287s 0.000s
im_detect: 67/255 0.287s 0.000s
im_detect: 68/255 0.292s 0.000s
im_detect: 69/255 0.290s 0.000s
im_detect: 70/255 0.288s 0.000s
im_detect: 71/255 0.286s 0.000s
im_detect: 72/255 0.284s 0.000s
im_detect: 73/255 0.281s 0.000s
im_detect: 74/255 0.280s 0.000s
im_detect: 75/255 0.278s 0.000s
im_detect: 76/255 0.276s 0.000s
im_detect: 77/255 0.280s 0.000s
im_detect: 78/255 0.286s 0.000s
im_detect: 79/255 0.284s 0.000s
im_detect: 80/255 0.282s 0.000s
im_detect: 81/255 0.281s 0.000s
im_detect: 82/255 0.279s 0.000s
im_detect: 83/255 0.278s 0.000s
im_detect: 84/255 0.277s 0.000s
im_detect: 85/255 0.276s 0.000s
im_detect: 86/255 0.274s 0.000s
im_detect: 87/255 0.273s 0.000s
im_detect: 88/255 0.272s 0.000s
im_detect: 89/255 0.271s 0.000s
im_detect: 90/255 0.269s 0.000s
im_detect: 91/255 0.268s 0.000s
im_detect: 92/255 0.267s 0.000s
im_detect: 93/255 0.266s 0.000s
im_detect: 94/255 0.265s 0.000s
im_detect: 95/255 0.263s 0.000s
im_detect: 96/255 0.262s 0.000s
im_detect: 97/255 0.261s 0.000s
im_detect: 98/255 0.260s 0.000s
im_detect: 99/255 0.265s 0.000s
im_detect: 100/255 0.269s 0.000s
im_detect: 101/255 0.276s 0.000s
im_detect: 102/255 0.275s 0.000s
im_detect: 103/255 0.274s 0.000s
im_detect: 104/255 0.277s 0.000s
im_detect: 105/255 0.275s 0.000s
im_detect: 106/255 0.274s 0.000s
im_detect: 107/255 0.272s 0.000s
im_detect: 108/255 0.275s 0.000s
im_detect: 109/255 0.273s 0.000s
im_detect: 110/255 0.276s 0.000s
im_detect: 111/255 0.276s 0.000s
im_detect: 112/255 0.274s 0.000s
im_detect: 113/255 0.273s 0.000s
im_detect: 114/255 0.272s 0.000s
im_detect: 115/255 0.275s 0.000s
im_detect: 116/255 0.278s 0.000s
im_detect: 117/255 0.277s 0.000s
im_detect: 118/255 0.280s 0.000s
im_detect: 119/255 0.279s 0.000s
im_detect: 120/255 0.278s 0.000s
im_detect: 121/255 0.281s 0.000s
im_detect: 122/255 0.284s 0.000s
im_detect: 123/255 0.282s 0.000s
im_detect: 124/255 0.281s 0.000s
im_detect: 125/255 0.280s 0.000s
im_detect: 126/255 0.283s 0.000s
im_detect: 127/255 0.282s 0.000s
im_detect: 128/255 0.281s 0.000s
im_detect: 129/255 0.280s 0.000s
im_detect: 130/255 0.282s 0.000s
im_detect: 131/255 0.285s 0.000s
im_detect: 132/255 0.288s 0.000s
im_detect: 133/255 0.291s 0.000s
im_detect: 134/255 0.292s 0.000s
im_detect: 135/255 0.291s 0.000s
im_detect: 136/255 0.293s 0.000s
im_detect: 137/255 0.292s 0.000s
im_detect: 138/255 0.291s 0.000s
im_detect: 139/255 0.289s 0.000s
im_detect: 140/255 0.288s 0.000s
im_detect: 141/255 0.287s 0.000s
im_detect: 142/255 0.286s 0.000s
im_detect: 143/255 0.288s 0.000s
im_detect: 144/255 0.287s 0.000s
im_detect: 145/255 0.287s 0.000s
im_detect: 146/255 0.286s 0.000s
im_detect: 147/255 0.285s 0.000s
im_detect: 148/255 0.284s 0.000s
im_detect: 149/255 0.286s 0.000s
im_detect: 150/255 0.292s 0.000s
im_detect: 151/255 0.291s 0.000s
im_detect: 152/255 0.290s 0.000s
im_detect: 153/255 0.289s 0.000s
im_detect: 154/255 0.288s 0.000s
im_detect: 155/255 0.290s 0.000s
im_detect: 156/255 0.289s 0.000s
im_detect: 157/255 0.290s 0.000s
im_detect: 158/255 0.289s 0.000s
im_detect: 159/255 0.292s 0.000s
im_detect: 160/255 0.291s 0.000s
im_detect: 161/255 0.291s 0.000s
im_detect: 162/255 0.292s 0.000s
im_detect: 163/255 0.294s 0.000s
im_detect: 164/255 0.295s 0.000s
im_detect: 165/255 0.294s 0.000s
im_detect: 166/255 0.293s 0.000s
im_detect: 167/255 0.295s 0.000s
im_detect: 168/255 0.296s 0.000s
im_detect: 169/255 0.295s 0.000s
im_detect: 170/255 0.294s 0.000s
im_detect: 171/255 0.294s 0.000s
im_detect: 172/255 0.293s 0.000s
im_detect: 173/255 0.292s 0.000s
im_detect: 174/255 0.291s 0.000s
im_detect: 175/255 0.290s 0.000s
im_detect: 176/255 0.290s 0.000s
im_detect: 177/255 0.289s 0.000s
im_detect: 178/255 0.288s 0.000s
im_detect: 179/255 0.288s 0.000s
im_detect: 180/255 0.287s 0.000s
im_detect: 181/255 0.286s 0.000s
im_detect: 182/255 0.285s 0.000s
im_detect: 183/255 0.285s 0.000s
im_detect: 184/255 0.284s 0.000s
im_detect: 185/255 0.283s 0.000s
im_detect: 186/255 0.282s 0.000s
im_detect: 187/255 0.282s 0.000s
im_detect: 188/255 0.281s 0.000s
im_detect: 189/255 0.280s 0.000s
im_detect: 190/255 0.280s 0.000s
im_detect: 191/255 0.279s 0.000s
im_detect: 192/255 0.278s 0.000s
im_detect: 193/255 0.278s 0.000s
im_detect: 194/255 0.277s 0.000s
im_detect: 195/255 0.277s 0.000s
im_detect: 196/255 0.276s 0.000s
im_detect: 197/255 0.275s 0.000s
im_detect: 198/255 0.275s 0.000s
im_detect: 199/255 0.274s 0.000s
im_detect: 200/255 0.274s 0.000s
im_detect: 201/255 0.273s 0.000s
im_detect: 202/255 0.272s 0.000s
im_detect: 203/255 0.272s 0.000s
im_detect: 204/255 0.272s 0.000s
im_detect: 205/255 0.271s 0.000s
im_detect: 206/255 0.271s 0.000s
im_detect: 207/255 0.270s 0.000s
im_detect: 208/255 0.270s 0.000s
im_detect: 209/255 0.269s 0.000s
im_detect: 210/255 0.269s 0.000s
im_detect: 211/255 0.270s 0.000s
im_detect: 212/255 0.271s 0.000s
im_detect: 213/255 0.271s 0.000s
im_detect: 214/255 0.271s 0.000s
im_detect: 215/255 0.271s 0.000s
im_detect: 216/255 0.272s 0.000s
im_detect: 217/255 0.275s 0.000s
im_detect: 218/255 0.274s 0.000s
im_detect: 219/255 0.273s 0.000s
im_detect: 220/255 0.275s 0.000s
im_detect: 221/255 0.276s 0.000s
im_detect: 222/255 0.276s 0.000s
im_detect: 223/255 0.275s 0.000s
im_detect: 224/255 0.274s 0.000s
im_detect: 225/255 0.276s 0.000s
im_detect: 226/255 0.275s 0.000s
im_detect: 227/255 0.275s 0.000s
im_detect: 228/255 0.274s 0.000s
im_detect: 229/255 0.273s 0.000s
im_detect: 230/255 0.274s 0.000s
im_detect: 231/255 0.274s 0.000s
im_detect: 232/255 0.273s 0.000s
im_detect: 233/255 0.273s 0.000s
im_detect: 234/255 0.272s 0.000s
im_detect: 235/255 0.274s 0.000s
im_detect: 236/255 0.274s 0.000s
im_detect: 237/255 0.273s 0.000s
im_detect: 238/255 0.273s 0.000s
im_detect: 239/255 0.272s 0.000s
im_detect: 240/255 0.272s 0.000s
im_detect: 241/255 0.271s 0.000s
im_detect: 242/255 0.271s 0.000s
im_detect: 243/255 0.270s 0.000s
im_detect: 244/255 0.270s 0.000s
im_detect: 245/255 0.269s 0.000s
im_detect: 246/255 0.269s 0.000s
im_detect: 247/255 0.268s 0.000s
im_detect: 248/255 0.268s 0.000s
im_detect: 249/255 0.267s 0.000s
im_detect: 250/255 0.267s 0.000s
im_detect: 251/255 0.267s 0.000s
im_detect: 252/255 0.266s 0.000s
im_detect: 253/255 0.266s 0.000s
im_detect: 254/255 0.265s 0.000s
im_detect: 255/255 0.265s 0.000s
Evaluating detections
Writing text VOC results file
VOC07 metric? Yes
Traceback (most recent call last):
  File "./tools/test_net.py", line 106, in <module>
    test_net(sess, network, imdb, weights_filename)
  File "/home/alex/Faster-RCNN_TF/tools/../lib/fast_rcnn/test.py", line 345, in test_net
    imdb.evaluate_detections(all_boxes, output_dir)
  File "/home/alex/Faster-RCNN_TF/tools/../lib/datasets/pascal_voc.py", line 321, in evaluate_detections
    self._do_python_eval(output_dir)
  File "/home/alex/Faster-RCNN_TF/tools/../lib/datasets/pascal_voc.py", line 284, in _do_python_eval
    use_07_metric=use_07_metric)
  File "/home/alex/Faster-RCNN_TF/tools/../lib/datasets/voc_eval.py", line 126, in voc_eval
    R = [obj for obj in recs[imagename] if obj['name'] == classname]
KeyError: '501'
